#pragma once

#include <array>

#include "dirsig5/apis/Ray.h"
#include "dirsig5/common/SpectralVector.h"

namespace d5::core {

struct Problem;

class AtmosphereManager;

/**
 * This class takes a node list generated by PathGenerator and
 * computes a final radiance.
 */
class PathProcessor {
public:
  /**
   * Process a path. This function is used to process a set of
   * nodes representing a single path. Radiance for the current
   * spectral state is added to the buffer.
   */
  static void processPath(Problem &problem, size_t nWavelengths, size_t refWavelength);

private:
  /**
   * Define some scratch space that we'll use locally.
   */
  struct Scratch {
    Scratch(void) : sv(), embreeCore(), ray(&embreeCore), nWavelengths(0), pt(), vc() {}

    void update(size_t _nWavelengths) {
      if (nWavelengths != _nWavelengths) {
        sv[0].resize(_nWavelengths);
        sv[1].resize(_nWavelengths);
        sv[2].resize(_nWavelengths);
        sv[3].resize(_nWavelengths);
        sv[4].resize(_nWavelengths);
        nWavelengths = _nWavelengths;
      }
    }

    std::array<SpectralVector, 5> sv;
    apis::EmbreeRay embreeCore;
    apis::Ray ray;
    size_t nWavelengths;

    std::array<Pointf, 2> pt;
    std::array<Vectorf, 2> vc;
  };
};

} // namespace d5::core
